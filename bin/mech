#!/usr/bin/env ruby
require 'matrix'
require 'sdl2'


class Numeric
  def limit abs_value
    if self > abs_value
      abs_value
    elsif self < -abs_value
      -abs_value
    else
      self
    end
  end

  def limit_angle abs_value
    angle = self % (2 * Math::PI)
    if angle <= abs_value or angle >= 2 * Math::PI - abs_value
      self
    else
      if angle <= Math::PI
        abs_value
      else
        -abs_value
      end
    end
  end
end


class Vector
  def angle
    Math.atan2 self[1], self[0]
  end
end


class Sprite
  def initialize renderer, file_name, count
    @sprite = (0...count).map { |i| renderer.create_texture_from SDL2::Surface.load file_name % i }
    @count = count
  end

  def index angle
    (angle * @count / (2 * Math::PI)).round % @count
  end

  def rectangle position
    x, y = *position
    w, h = @sprite.first.w, @sprite.first.h
    SDL2::Rect[x - w / 2, y - h / 2, w, h]
  end

  def paint renderer, position, direction
    sprite = @sprite[index(direction)]
    renderer.copy sprite, nil, rectangle(position)
  end
end


class MechGraphics
  def initialize renderer
    @body_sprite = Sprite.new renderer, 'data/mech%02d.png', 36
    @turret_sprite = Sprite.new renderer, 'data/turret%02d.png', 18
  end

  def paint renderer, physics
    @body_sprite.paint renderer, physics.position, physics.direction
    @turret_sprite.paint renderer, physics.position, physics.direction
  end
end


class Physics
  MAX_SPEED = 100.0
  TURN_RATE = 2 * Math::PI / 10
  ACCELERATION = 50

  attr_reader :position
  attr_reader :direction

  def initialize position
    @position = position
    @direction = 0
    @speed = 0
  end

  def update joystick, dt
    if joystick
      nominal_speed = joystick.axes.norm * MAX_SPEED / 32768
      speed_change = (nominal_speed - @speed).limit ACCELERATION * dt
      nominal_direction = joystick.axes.angle
      direction_change = (nominal_direction - @direction).limit_angle TURN_RATE * dt
      @direction = (@direction + direction_change) % (2 * Math::PI)
      @speed += speed_change
    end
    @position += speed * dt
  end

  def speed
    Vector[Math.cos(@direction), Math.sin(@direction)] * @speed
  end
end


class Joystick
  attr_reader :quit

  def initialize event
    @device = SDL2::Joystick.open event.which
    @axes = [0, 0]
    @button = false
    @quit = false
  end

  def handle_motion event
    @axes[0] = event.value if event.axis == 0
    @axes[1] = event.value if event.axis == 1
  end

  def handle_button event
    @button = true if event.button == 3
    @quit = true if event.button == 8
  end

  def axes
    Vector[*@axes]
  end

  def button
    retval = @button
    @button = false
    retval
  end
end


class Game
  def initialize
    SDL2.init SDL2::INIT_VIDEO | SDL2::INIT_JOYSTICK | SDL2::INIT_AUDIO
    SDL2::Mixer.init SDL2::Mixer::INIT_OGG
    SDL2::Mixer.open 22050, SDL2::Mixer::DEFAULT_FORMAT, 2, 512
    @window = SDL2::Window.create 'Mech', SDL2::Window::POS_UNDEFINED, SDL2::Window::POS_UNDEFINED, 640, 480, SDL2::Window::Flags::FULLSCREEN_DESKTOP
    w, h = *@window.size
    @renderer = @window.create_renderer -1, 0
    @mech_graphics = MechGraphics.new @renderer
    @mech_physics = Physics.new Vector[w/2, h/2]
    @laser_sound = SDL2::Mixer::Chunk.load 'data/laser.ogg'
    @quit = false
  end

  def handle_events
    while event = SDL2::Event.poll
      case event
      when SDL2::Event::Quit
        @quit = true
      when SDL2::Event::JoyDeviceAdded
        @joystick = Joystick.new event
      when SDL2::Event::JoyAxisMotion
        @joystick.handle_motion event
      when SDL2::Event::JoyButtonDown
        @joystick.handle_button event
      end
    end
    if @joystick
      SDL2::Mixer::Channels.play 0, @laser_sound, 0 if @joystick.button
      @quit ||= @joystick.quit
    end
  end

  def paint
    @renderer.draw_color = [0xA0, 0xA0, 0xA0]
    @renderer.clear
    @mech_graphics.paint @renderer, @mech_physics
    @renderer.present
  end

  def run
    time = Time.new.to_f
    while not @quit
      paint
      handle_events
      dt = Time.new.to_f - time
      if dt < 0.04
        sleep 0.04 - dt
        dt = 0.04
      end
      @mech_physics.update @joystick, dt
      time += dt
    end
  end
end


Game.new.run
